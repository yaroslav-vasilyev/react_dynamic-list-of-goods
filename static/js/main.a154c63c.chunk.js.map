{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","className","map","good","style","color","name","id","getAll","fetch","then","response","json","App","displayElement","useState","setGoods","isError","setError","loading","setLoading","buttonDisabled","setButtonDisabled","loadGoodsFromServer","data","a","currentGoods","setTimeout","Alert","severity","ButtonGroup","variant","Button","type","onClick","disabled","sort","currGood","nextGood","localeCompare","slice","filter","ReactDOM","render","document","getElementById"],"mappings":"iRAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,oBAAIC,UAAU,YAAd,SACGD,GAASA,EAAME,KAAI,SAAAC,GAAI,OACtB,oBAEE,UAAQ,OACRF,UAAU,OACVG,MAAO,CACLC,MAAOF,EAAKE,OALhB,SAQGF,EAAKG,MAPDH,EAAKI,UCNX,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,ICCMC,EAAgB,WAC3B,IAsBIC,EAtBJ,EAA0BC,mBAAwB,MAAlD,mBAAOf,EAAP,KAAcgB,EAAd,KACA,EAA4BD,oBAAS,GAArC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA4CL,oBAAS,GAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KAEMC,EAAmB,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DAC1BP,GAAS,GACTE,GAAW,GACXE,GAAkB,GAHQ,kBAKGE,EALH,OAKlBE,EALkB,OAOxBC,YAAW,WACTP,GAAW,GACXJ,EAASU,GACTJ,GAAkB,KACjB,MAXqB,kDAaxBJ,GAAS,GAbe,0DAAH,sDA+BzB,OAXEJ,EADEG,EAEA,cAACW,EAAA,EAAD,CAAOC,SAAS,QAAhB,yDAIOV,EACQ,sBAAMlB,UAAU,WAEhB,cAAC,EAAD,CAAWD,MAAOA,IAInC,sBAAKC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,mCAEA,eAAC6B,EAAA,EAAD,CACEC,QAAQ,YACR,aAAW,gCAFb,UAIE,cAACC,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMX,EAAoBf,MACnCP,UAAU,UACV8B,QAAQ,YACRI,SAAUd,EANZ,4BAWA,cAACW,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,oBACRC,QAAS,kBAAMX,ED3DhBf,IACJE,MAAK,SAAAV,GAAK,OAAIA,EACZoC,MAAK,SAACC,EAAUC,GAAX,OAAwBD,EAAS/B,KACpCiC,cAAcD,EAAShC,SACzBkC,MAAM,EAAG,QCwDNvC,UAAU,UACV8B,QAAQ,YACRI,SAAUd,EANZ,gCAWA,cAACW,EAAA,EAAD,CACEC,KAAK,SACL,UAAQ,aACRC,QAAS,kBAAMX,ED9DhBf,IACJE,MAAK,SAAAV,GAAK,OAAIA,EAAMyC,QAAO,SAACtC,GAAD,MAAyB,QAAfA,EAAKE,cC8DrCJ,UAAU,UACV8B,QAAQ,YACRI,SAAUd,EANZ,+BAYDP,MCvFP4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a154c63c.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[] | null\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul className=\"goodsList\">\n    {goods && goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        className=\"good\"\n        style={{\n          color: good.color,\n        }}\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => goods\n      .sort((currGood, nextGood) => currGood.name\n        .localeCompare(nextGood.name))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => goods.filter((good) => good.color === 'red'));\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Alert from '@mui/material/Alert';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\n\nimport { GoodsList } from './GoodsList';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[] | null>(null);\n  const [isError, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [buttonDisabled, setButtonDisabled] = useState(false);\n\n  const loadGoodsFromServer = async (data: Promise<Good[]>) => {\n    setError(false);\n    setLoading(true);\n    setButtonDisabled(true);\n    try {\n      const currentGoods = await data;\n\n      setTimeout(() => {\n        setLoading(false);\n        setGoods(currentGoods);\n        setButtonDisabled(false);\n      }, 1500);\n    } catch (err) {\n      setError(true);\n    }\n  };\n\n  let displayElement;\n\n  if (isError) {\n    displayElement = (\n      <Alert severity=\"error\">\n        Error loading data. Please try again later.\n      </Alert>\n    );\n  } else if (loading) {\n    displayElement = <span className=\"loader\" />;\n  } else {\n    displayElement = <GoodsList goods={goods} />;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Dynamic list of Goods</h1>\n\n      <ButtonGroup\n        variant=\"contained\"\n        aria-label=\"outlined primary button group\"\n      >\n        <Button\n          type=\"button\"\n          data-cy=\"all-button\"\n          onClick={() => loadGoodsFromServer(getAll())}\n          className=\"button2\"\n          variant=\"contained\"\n          disabled={buttonDisabled}\n        >\n          Load all goods\n        </Button>\n\n        <Button\n          type=\"button\"\n          data-cy=\"first-five-button\"\n          onClick={() => loadGoodsFromServer(get5First())}\n          className=\"button2\"\n          variant=\"contained\"\n          disabled={buttonDisabled}\n        >\n          Load 5 first goods\n        </Button>\n\n        <Button\n          type=\"button\"\n          data-cy=\"red-button\"\n          onClick={() => loadGoodsFromServer(getRedGoods())}\n          className=\"button2\"\n          variant=\"contained\"\n          disabled={buttonDisabled}\n        >\n          Load red goods\n        </Button>\n      </ButtonGroup>\n\n      {displayElement}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}